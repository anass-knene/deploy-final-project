{"version":3,"file":"static/js/74.dd12d367.chunk.js","mappings":"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","sources":["assets/img/logo.svg","components/company/company-sign-up/CompanySignUp.js","graphQL/Mutations.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","../node_modules/@apollo/src/react/hooks/useMutation.ts","../node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["var _path, _path2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgLogo(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 375,\n    viewBox: \"0 0 375 375\",\n    height: 375,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#FFF\",\n    d: \"M 187.507812 344.40625 C 147.492188 344.40625 109.8125 328.828125 81.539062 300.496094 C 53.203125 272.21875 37.628906 234.539062 37.628906 194.523438 C 37.628906 154.507812 53.203125 116.828125 81.539062 88.554688 C 109.8125 60.21875 147.492188 44.644531 187.507812 44.644531 C 227.523438 44.644531 265.203125 60.21875 293.476562 88.554688 C 321.8125 116.886719 337.386719 154.507812 337.386719 194.523438 C 337.386719 234.539062 321.8125 272.21875 293.476562 300.496094 C 265.203125 328.828125 227.523438 344.40625 187.507812 344.40625 M 187.507812 53.628906 C 149.886719 53.628906 114.484375 68.304688 87.886719 94.902344 C 61.289062 121.5 46.613281 156.90625 46.613281 194.523438 C 46.613281 232.144531 61.289062 267.546875 87.886719 294.144531 C 114.484375 320.742188 149.886719 335.417969 187.507812 335.417969 C 225.128906 335.417969 260.53125 320.742188 287.128906 294.144531 C 313.726562 267.546875 328.402344 232.144531 328.402344 194.523438 C 328.402344 156.90625 313.726562 121.5 287.128906 94.902344 C 260.53125 68.304688 225.128906 53.628906 187.507812 53.628906\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#FFF\",\n    d: \"M 246.859375 232.554688 C 245.691406 233.636719 243.871094 233.566406 242.789062 232.398438 L 219.394531 207.148438 L 217.796875 208.628906 L 241.195312 233.875 C 242.273438 235.042969 242.207031 236.867188 241.035156 237.945312 C 239.871094 239.027344 238.050781 238.957031 236.964844 237.792969 L 213.570312 212.542969 L 211.976562 214.023438 L 235.371094 239.273438 C 236.453125 240.4375 236.382812 242.257812 235.21875 243.339844 C 234.054688 244.421875 232.226562 244.351562 231.148438 243.183594 L 207.753906 217.9375 L 206.160156 219.414062 L 229.550781 244.660156 C 230.632812 245.832031 230.5625 247.652344 229.394531 248.734375 C 228.230469 249.8125 226.410156 249.742188 225.328125 248.578125 L 201.933594 223.328125 L 201.925781 223.339844 L 201.191406 222.574219 C 200.546875 221.867188 199.960938 221.167969 199.429688 220.445312 L 199.40625 220.417969 C 197.429688 217.734375 196.300781 214.9375 196.304688 211.664062 C 196.316406 208.230469 197.523438 204.984375 199.71875 202.3125 C 198.242188 200.75 191.660156 194.332031 183.726562 186.632812 C 174.25 196.710938 165.871094 205.652344 164.183594 207.617188 C 166.636719 210.339844 168.078125 213.722656 168.253906 217.359375 C 168.421875 220.828125 167.363281 223.84375 165.402344 226.78125 L 165.40625 226.78125 L 165.375 226.820312 C 164.851562 227.605469 164.265625 228.378906 163.621094 229.160156 L 162.882812 230.003906 L 162.871094 229.992188 L 160 232.988281 C 144.199219 246.785156 136.34375 247.980469 131.742188 244.042969 C 126.355469 239.429688 124.527344 231.40625 136.613281 212.894531 L 139.269531 209.351562 L 139.273438 209.34375 L 139.566406 208.992188 C 142.800781 205.074219 145.910156 202.855469 150.398438 202.292969 C 153.804688 201.867188 157.183594 202.597656 160.15625 204.335938 C 161.839844 202.300781 169.46875 192.296875 177.992188 181.078125 C 166.265625 169.722656 153.597656 157.484375 150.304688 154.21875 C 147.996094 152.015625 146.722656 150.519531 146.722656 150.519531 C 144.480469 148.097656 144.644531 144.308594 147.078125 142.050781 C 149.519531 139.789062 153.308594 139.917969 155.554688 142.339844 C 155.554688 142.339844 157.140625 144.019531 158.535156 145.648438 L 158.539062 145.640625 C 160.585938 147.996094 172.007812 161.703125 182.84375 174.683594 C 193.007812 161.296875 203.089844 147.984375 205.011719 145.558594 L 205.015625 145.570312 C 206.414062 143.773438 208.011719 141.914062 208.011719 141.914062 C 210.265625 139.238281 214.277344 138.914062 216.972656 141.191406 C 219.667969 143.464844 220.023438 147.472656 217.761719 150.140625 C 217.761719 150.140625 216.492188 151.796875 214.152344 154.238281 C 211.054688 157.617188 199.6875 169.667969 188.546875 181.507812 C 195.800781 190.175781 201.894531 197.417969 203.367188 199.039062 C 206.09375 197.273438 209.242188 196.4375 212.46875 196.691406 C 216.71875 197.023438 219.746094 198.976562 222.960938 202.523438 L 223.253906 202.847656 L 223.261719 202.851562 L 247.011719 228.488281 C 248.09375 229.652344 248.023438 231.472656 246.859375 232.554688\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.f23fe2f7d3b5b409ab81b1dd231accac.svg\";\nexport { ForwardRef as ReactComponent };","import { useMutation } from \"@apollo/client\";\nimport React from \"react\";\nimport Swal from \"sweetalert2\";\nimport \"../../../styles/companySignUp.scss\";\nimport logo from \"../../../assets/img/logo.svg\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { CREATE_COMPANY_MUTATION } from \"../../../graphQL/Mutations\";\n\nexport default function CompanySignUp() {\n  let navigate = useNavigate();\n  const [addCompany, { data, loading, error }] = useMutation(\n    CREATE_COMPANY_MUTATION\n  );\n  const formSubmitAddCompany = (e) => {\n    e.preventDefault();\n    if (e.target.password.value !== e.target.repeatPassword.value) {\n      return Swal.fire({\n        position: \"top\",\n        icon: \"error\",\n        title: \"Your passwords do not match\",\n        showConfirmButton: false,\n        timer: 2000,\n        customClass: \"swal-width\",\n      });\n    }\n\n    addCompany({\n      variables: {\n        company_Name: e.target.company_Name.value,\n        owner_name: e.target.owner_name.value,\n        company_type: e.target.company_type.value,\n        address: e.target.address.value,\n        phone: e.target.phone.value,\n        email: e.target.email.value,\n        password: e.target.password.value,\n        repeatPassword: e.target.repeatPassword.value,\n        description: e.target.description.value,\n      },\n    }).then((res) => {\n      console.log(res);\n      if (\n        res.data &&\n        e.target.password.value === e.target.repeatPassword.value\n      ) {\n        Swal.fire({\n          position: \"top\",\n          icon: \"success\",\n          title: \"Account Created\",\n          showConfirmButton: false,\n          timer: 2000,\n          customClass: \"swal-width\",\n        });\n        navigate(\"/company-login\");\n      }\n    });\n  };\n\n  if (loading)\n    return (\n      <img\n        className=\"Spinner-Media\"\n        src=\"https://cdn.dribbble.com/users/924068/screenshots/3757746/media/6035d641a7d26f1ba75421d15ce173cf.gif\"\n        alt=\"img\"\n      />\n    );\n\n  // Error handling needs to be reviewed: When there is an error it needs to show\n  // Sweeet Alert and dont make the user loses everything he has entered so far\n\n  if (error) {\n    console.log(\"data\", data);\n    console.log(\"error\", error);\n    return `${error.message}`;\n  }\n\n  return (\n    <>\n      <section className=\"Company-sign-container\">\n        <div className=\"Wall-left bg-secondary\">\n          <div>\n            <img src={logo} alt=\"signup logo\" />\n          </div>\n        </div>\n\n        <div className=\"signUp-form-right\">\n          <h2>Company Signup page</h2>\n\n          <form className=\"form-style-5\" onSubmit={formSubmitAddCompany}>\n            <legend>\n              Let's get you all set up to find the perfect freelancer !\n            </legend>\n\n            <label>\n              <span>Company Name</span>\n              <input\n                type=\"text\"\n                name=\"company_Name\"\n                required\n                maxLength=\"50\"\n                minLength=\"2\"\n              />\n            </label>\n\n            <label>\n              <span>Owner/Manager Name</span>\n              <input\n                type=\"text\"\n                name=\"owner_name\"\n                required\n                minLength=\"2\"\n                maxLength=\"50\"\n              />\n            </label>\n            <label>\n              <span>Type of Business</span>\n              <input\n                type=\"text\"\n                name=\"company_type\"\n                required\n                minLength=\"2\"\n                maxLength=\"20\"\n              />\n            </label>\n\n            <label>\n              <span>Company Address</span>\n              <input\n                type=\"text\"\n                name=\"address\"\n                required\n                minLength=\"2\"\n                maxLength=\"50\"\n              />\n            </label>\n\n            <label>\n              <span>Phone</span>\n              <input\n                type=\"phone\"\n                name=\"phone\"\n                required\n                minLength=\"2\"\n                maxLength=\"50\"\n              />\n            </label>\n\n            <label>\n              {\" \"}\n              <span>Email</span>\n              <input\n                type=\"email\"\n                name=\"email\"\n                required\n                minLength=\"2\"\n                maxLength=\"50\"\n              />\n            </label>\n            <label>\n              <span>Password</span>\n              <input\n                type=\"password\"\n                name=\"password\"\n                required\n                minLength=\"2\"\n                maxLength=\"50\"\n              />\n            </label>\n\n            <label>\n              <span>Repeat Password</span>\n              <input\n                type=\"password\"\n                name=\"repeatPassword\"\n                required\n                minLength=\"2\"\n                maxLength=\"50\"\n              />\n            </label>\n\n            <label>\n              <span>Company Summary</span>\n              <textarea\n                name=\"description\"\n                required\n                minLength={5}\n                maxLength={500}\n              />\n            </label>\n\n            <label>\n              <span></span>\n              <input type=\"submit\" value=\"Sign Up\" />\n            </label>\n          </form>\n        </div>\n      </section>\n    </>\n  );\n}\n","import { gql } from \"@apollo/client\";\n//COMPANY MUTATIONS\n//add company\nexport const CREATE_COMPANY_MUTATION = gql`\n  mutation AddCompany(\n    $company_Name: String!\n    $owner_name: String!\n    $company_type: String!\n    $address: String!\n    $phone: String!\n    $email: String!\n    $password: String!\n    $description: String!\n  ) {\n    addCompany(\n      company_Name: $company_Name\n      owner_name: $owner_name\n      company_type: $company_type\n      address: $address\n      phone: $phone\n      email: $email\n      password: $password\n      description: $description\n    ) {\n      company_Name\n      owner_name\n      company_type\n      address\n      phone\n      email\n      password\n      description\n    }\n  }\n`;\n//login as company\nexport const COMPANY_LOGIN = gql`\n  mutation LoginCompany($email: String!, $password: String!) {\n    loginCompany(email: $email, password: $password) {\n      token\n      tokenExpiration\n      company {\n        id\n        company_Name\n        owner_name\n        avatar\n        company_type\n        address\n        phone\n        email\n        description\n        favorite {\n          first_name\n          last_name\n          avatar\n          email\n          description\n        }\n        jobs {\n          id\n          job_Title\n          num_of_people_needed\n          job_description\n          issued_At\n          start_Date\n          end_Date\n        }\n      }\n    }\n  }\n`;\n//Delete Company\nexport const DELETE_COMPANY = gql`\n  mutation DeleteCompany($deleteCompanyId: ID) {\n    deleteCompany(id: $deleteCompanyId) {\n      success\n    }\n  }\n`;\n//update Company\nexport const UPDATE_COMPANY = gql`\n  mutation UpdateCompany(\n    $updateCompanyId: ID!\n    $companyName: String\n    $ownerName: String\n    $file: Upload\n    $companyType: String\n    $address: String\n    $phone: String\n    $email: String\n    $password: String\n    $description: String\n  ) {\n    updateCompany(\n      id: $updateCompanyId\n      company_Name: $companyName\n      owner_name: $ownerName\n      file: $file\n      company_type: $companyType\n      address: $address\n      phone: $phone\n      email: $email\n      password: $password\n      description: $description\n    ) {\n      id\n      company_Name\n      owner_name\n      avatar\n      company_type\n      address\n      phone\n      email\n      password\n      description\n    }\n  }\n`;\nexport const COMPANY_FAVORITE = gql`\n  mutation updateCompanyFavorite($userId: ID!, $companyId: ID!) {\n    updateCompanyFavorite(userId: $userId, companyId: $companyId) {\n      id\n      company_Name\n      owner_name\n      avatar\n      company_type\n      address\n      phone\n      email\n      password\n      description\n    }\n  }\n`;\nexport const DELETE_COMPANY_FAVORITE = gql`\n  mutation DeleteCompanyFavorite($companyId: ID!, $userId: ID!) {\n    deleteCompanyFavorite(companyId: $companyId, userId: $userId) {\n      id\n      company_Name\n      owner_name\n      avatar\n      company_type\n      address\n      phone\n      email\n      password\n      description\n    }\n  }\n`;\nexport const CREATE_USER_MUTATION = gql`\n  mutation addUser(\n    $first_name: String!\n    $last_name: String!\n    $phone: String!\n    $email: String!\n    $password: String!\n    $hourly_rate: Int!\n    $description: String!\n  ) {\n    addUser(\n      first_name: $first_name\n      last_name: $last_name\n      phone: $phone\n      email: $email\n      password: $password\n      hourly_rate: $hourly_rate\n      description: $description\n    ) {\n      id\n    }\n  }\n`;\n\nexport const USER_FAVORITE = gql`\n  mutation updateUserFavorite($userId: ID!, $job: JobInputType) {\n    updateUserFavorite(userId: $userId, job: $job) {\n      id\n      first_name\n      last_name\n      email\n      favorite {\n        job_Title\n        start_Date\n        end_Date\n        issued_At\n        created_by {\n          company_Name\n          company_type\n          email\n        }\n      }\n    }\n  }\n`;\n\n//login as user\nexport const USER_LOGIN = gql`\n  mutation LoginUser($email: String!, $password: String!) {\n    loginUser(email: $email, password: $password) {\n      token\n      tokenExpiration\n      user {\n        first_name\n        last_name\n        avatar\n        email\n        phone\n        password\n        hourly_rate\n        description\n        id\n        favorite {\n          id\n          job_Title\n          start_Date\n          end_Date\n          num_of_people_needed\n        }\n      }\n    }\n  }\n`;\n//Delete User\nexport const DELETE_USER = gql`\n  mutation DeleteUser($deleteUserId: ID) {\n    deleteUser(id: $deleteUserId) {\n      success\n    }\n  }\n`;\n//Delete User\nexport const UPDATE_USER = gql`\n  mutation UpdateUser(\n    $updateUserId: ID!\n    $firstName: String\n    $lastName: String\n    $file: Upload\n    $email: String\n    $password: String\n    $phone: String\n    $hourlyRate: Int\n    $description: String\n  ) {\n    updateUser(\n      id: $updateUserId\n      first_name: $firstName\n      last_name: $lastName\n      file: $file\n      email: $email\n      password: $password\n      phone: $phone\n      hourly_rate: $hourlyRate\n      description: $description\n    ) {\n      id\n      first_name\n      last_name\n      avatar\n      email\n      phone\n      password\n      hourly_rate\n      description\n    }\n  }\n`;\n//Job Mutations\nexport const CREATE_JOB = gql`\n  mutation AddJob(\n    $jobTitle: String!\n    $startDate: String!\n    $endDate: String!\n    $numOfPeopleNeeded: Int!\n    $jobDescription: String!\n    $createdBy: ID!\n  ) {\n    addJob(\n      job_Title: $jobTitle\n      start_Date: $startDate\n      end_Date: $endDate\n      num_of_people_needed: $numOfPeopleNeeded\n      job_description: $jobDescription\n      created_by: $createdBy\n    ) {\n      job_Title\n      start_Date\n      end_Date\n      num_of_people_needed\n      job_description\n      created_by {\n        company_Name\n      }\n    }\n  }\n`;\n\n//Delete User\nexport const DELETE_JOB = gql`\n  mutation DeleteJob($deleteJobId: ID) {\n    deleteJob(id: $deleteJobId) {\n      success\n    }\n  }\n`;\n\n//Delete User\nexport const UPDATE_JOB = gql`\n  mutation UpdateJob(\n    $updateJobId: ID!\n    $jobTitle: String\n    $startDate: String\n    $endDate: String\n    $numOfPeopleNeeded: Int\n    $jobDescription: String\n  ) {\n    updateJob(\n      id: $updateJobId\n      job_Title: $jobTitle\n      start_Date: $startDate\n      end_Date: $endDate\n      num_of_people_needed: $numOfPeopleNeeded\n      job_description: $jobDescription\n    ) {\n      id\n      job_Title\n      start_Date\n      end_Date\n      num_of_people_needed\n      job_description\n    }\n  }\n`;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"names":["CompanySignUp","navigate","useNavigate","useMutation","CREATE_COMPANY_MUTATION","addCompany","data","loading","error","className","src","alt","console","log","message","logo","onSubmit","e","preventDefault","target","password","value","repeatPassword","Swal","position","icon","title","showConfirmButton","timer","customClass","variables","company_Name","owner_name","company_type","address","phone","email","description","then","res","type","name","required","maxLength","minLength","gql","COMPANY_LOGIN","DELETE_COMPANY","UPDATE_COMPANY","COMPANY_FAVORITE","DELETE_COMPANY_FAVORITE","CREATE_USER_MUTATION","USER_FAVORITE","USER_LOGIN","DELETE_USER","UPDATE_USER","CREATE_JOB","DELETE_JOB","UPDATE_JOB","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","useApolloClient","override","context","useContext","getApolloContext","client","__DEV__","invariant","mutation","options","verifyDocumentType","DocumentType","useState","called","result","setResult","ref","useRef","mutationId","isMounted","assign","current","execute","useCallback","executeOptions","baseOptions","ignoreResults","clientOptions","mergeOptions","mutate","response","errors","length","ApolloError","graphQLErrors","result_1","equal","onCompleted","_a","_b","catch","result_2","onError","reset","useEffect","__assign","cache","Map","operationName","Query","Mutation","Subscription","document","operation","cached","get","concat","fragments","definitions","filter","x","kind","queries","mutations","subscriptions","definition","variableDefinitions","payload","requiredOperationName"],"sourceRoot":""}