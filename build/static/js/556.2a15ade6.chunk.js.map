{"version":3,"file":"static/js/556.2a15ade6.chunk.js","mappings":"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","sources":["components/freelancer/freelancer-login/FreelancerLogin.js","graphQL/Mutations.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","../node_modules/@apollo/src/react/hooks/useMutation.ts","../node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["import React, { useContext, useRef } from \"react\";\r\n\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { USER_LOGIN } from \"../../../graphQL/Mutations\";\r\nimport { MyContext } from \"../../../Context/Context\";\r\nimport swal from \"sweetalert2\";\r\nimport \"../../../styles/LoginStyle.scss\";\r\nimport Swal from \"sweetalert2\";\r\nexport default function FreeLancerLogin() {\r\n  const navigate = useNavigate();\r\n  const formRef = useRef();\r\n  const { setIsFreelancerLogin, setFreelancerLoginData } =\r\n    useContext(MyContext);\r\n  const [loginUser, { loading, error, data }] = useMutation(USER_LOGIN);\r\n\r\n  const userLogin = (e) => {\r\n    e.preventDefault();\r\n    loginUser({\r\n      variables: {\r\n        email: formRef.current.email.value,\r\n        password: formRef.current.password.value,\r\n      },\r\n    }).then((res) => {\r\n      if (res.data) {\r\n        setFreelancerLoginData(res.data.loginUser.user);\r\n        localStorage.setItem(\"token\", res.data.loginUser.token);\r\n\r\n        swal.fire({\r\n          position: \"top\",\r\n          icon: \"success\",\r\n          title: \"Login successfully\",\r\n          showConfirmButton: false,\r\n          timer: 2000,\r\n          customClass: \"swal-width\",\r\n        });\r\n        setIsFreelancerLogin(true);\r\n        navigate(\"/\");\r\n      }\r\n    });\r\n  };\r\n  if (error) {\r\n    let errorMessage1 = error.message.split(\",\").splice(0, 1);\r\n    let errorMessage2 = error.message.split(\",\").splice(1, 2);\r\n    Swal.fire({\r\n      position: \"top\",\r\n      icon: \"error\",\r\n      title: ` ${errorMessage1}\r\n      ${errorMessage2}`,\r\n      showConfirmButton: false,\r\n      timer: 2000,\r\n      customClass: \"swal-width\",\r\n    });\r\n  }\r\n  return (\r\n    <div className=\" CompanyLogin\">\r\n      <div className=\"FormContainer\">\r\n        <form onSubmit={userLogin} ref={formRef} className=\"CompanyLoginForm\">\r\n          <h1 className=\"CompanyLoginHeader\">Freelancer Login</h1>\r\n          <div className=\"m-3 InputForm\">\r\n            <input\r\n              name=\"email\"\r\n              type=\"email\"\r\n              className=\"form-control shadow-none\"\r\n              placeholder=\"Email\"\r\n            />\r\n          </div>\r\n          <div className=\"m-3 InputForm\">\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              className=\"form-control shadow-none\"\r\n              placeholder=\"Password\"\r\n            />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-secondary\">\r\n            Submit\r\n          </button>\r\n          <div className=\"goToSignUp\">\r\n            <p>You Dont Have Account ?</p>\r\n            <Link to=\"/freelancer-signUp\">Sign Up</Link>\r\n          </div>\r\n        </form>\r\n        <div className=\"FreelancerImageDiv\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { gql } from \"@apollo/client\";\r\n//COMPANY MUTATIONS\r\n//add company\r\nexport const CREATE_COMPANY_MUTATION = gql`\r\n  mutation AddCompany(\r\n    $company_Name: String!\r\n    $owner_name: String!\r\n    $company_type: String!\r\n    $address: String!\r\n    $phone: String!\r\n    $email: String!\r\n    $password: String!\r\n    $description: String!\r\n  ) {\r\n    addCompany(\r\n      company_Name: $company_Name\r\n      owner_name: $owner_name\r\n      company_type: $company_type\r\n      address: $address\r\n      phone: $phone\r\n      email: $email\r\n      password: $password\r\n      description: $description\r\n    ) {\r\n      company_Name\r\n      owner_name\r\n      company_type\r\n      address\r\n      phone\r\n      email\r\n      password\r\n      description\r\n    }\r\n  }\r\n`;\r\n//login as company\r\nexport const COMPANY_LOGIN = gql`\r\n  mutation LoginCompany($email: String!, $password: String!) {\r\n    loginCompany(email: $email, password: $password) {\r\n      token\r\n      tokenExpiration\r\n      company {\r\n        id\r\n        company_Name\r\n        owner_name\r\n        avatar\r\n        company_type\r\n        address\r\n        phone\r\n        email\r\n        description\r\n        favorite {\r\n          first_name\r\n          last_name\r\n          avatar\r\n          email\r\n          description\r\n        }\r\n        jobs {\r\n          id\r\n          job_Title\r\n          num_of_people_needed\r\n          job_description\r\n          issued_At\r\n          start_Date\r\n          end_Date\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n//Delete Company\r\nexport const DELETE_COMPANY = gql`\r\n  mutation DeleteCompany($deleteCompanyId: ID) {\r\n    deleteCompany(id: $deleteCompanyId) {\r\n      success\r\n    }\r\n  }\r\n`;\r\n//update Company\r\nexport const UPDATE_COMPANY = gql`\r\n  mutation UpdateCompany(\r\n    $updateCompanyId: ID!\r\n    $companyName: String\r\n    $ownerName: String\r\n    $file: Upload\r\n    $companyType: String\r\n    $address: String\r\n    $phone: String\r\n    $email: String\r\n    $password: String\r\n    $description: String\r\n  ) {\r\n    updateCompany(\r\n      id: $updateCompanyId\r\n      company_Name: $companyName\r\n      owner_name: $ownerName\r\n      file: $file\r\n      company_type: $companyType\r\n      address: $address\r\n      phone: $phone\r\n      email: $email\r\n      password: $password\r\n      description: $description\r\n    ) {\r\n      id\r\n      company_Name\r\n      owner_name\r\n      avatar\r\n      company_type\r\n      address\r\n      phone\r\n      email\r\n      password\r\n      description\r\n    }\r\n  }\r\n`;\r\nexport const COMPANY_FAVORITE = gql`\r\n  mutation updateCompanyFavorite($userId: ID!, $companyId: ID!) {\r\n    updateCompanyFavorite(userId: $userId, companyId: $companyId) {\r\n      id\r\n      company_Name\r\n      owner_name\r\n      avatar\r\n      company_type\r\n      address\r\n      phone\r\n      email\r\n      password\r\n      description\r\n    }\r\n  }\r\n`;\r\nexport const DELETE_COMPANY_FAVORITE = gql`\r\n  mutation DeleteCompanyFavorite($companyId: ID!, $userId: ID!) {\r\n    deleteCompanyFavorite(companyId: $companyId, userId: $userId) {\r\n      id\r\n      company_Name\r\n      owner_name\r\n      avatar\r\n      company_type\r\n      address\r\n      phone\r\n      email\r\n      password\r\n      description\r\n    }\r\n  }\r\n`;\r\nexport const CREATE_USER_MUTATION = gql`\r\n  mutation addUser(\r\n    $first_name: String!\r\n    $last_name: String!\r\n    $phone: String!\r\n    $email: String!\r\n    $password: String!\r\n    $hourly_rate: Int!\r\n    $description: String!\r\n  ) {\r\n    addUser(\r\n      first_name: $first_name\r\n      last_name: $last_name\r\n      phone: $phone\r\n      email: $email\r\n      password: $password\r\n      hourly_rate: $hourly_rate\r\n      description: $description\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const USER_FAVORITE = gql`\r\n  mutation updateUserFavorite($userId: ID!, $job: JobInputType) {\r\n    updateUserFavorite(userId: $userId, job: $job) {\r\n      id\r\n      first_name\r\n      last_name\r\n      email\r\n      favorite {\r\n        job_Title\r\n        start_Date\r\n        end_Date\r\n        issued_At\r\n        created_by {\r\n          company_Name\r\n          company_type\r\n          email\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n//login as user\r\nexport const USER_LOGIN = gql`\r\n  mutation LoginUser($email: String!, $password: String!) {\r\n    loginUser(email: $email, password: $password) {\r\n      token\r\n      tokenExpiration\r\n      user {\r\n        first_name\r\n        last_name\r\n        avatar\r\n        email\r\n        phone\r\n        password\r\n        hourly_rate\r\n        description\r\n        id\r\n        favorite {\r\n          id\r\n          job_Title\r\n          start_Date\r\n          end_Date\r\n          num_of_people_needed\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n//Delete User\r\nexport const DELETE_USER = gql`\r\n  mutation DeleteUser($deleteUserId: ID) {\r\n    deleteUser(id: $deleteUserId) {\r\n      success\r\n    }\r\n  }\r\n`;\r\n//Delete User\r\nexport const UPDATE_USER = gql`\r\n  mutation UpdateUser(\r\n    $updateUserId: ID!\r\n    $firstName: String\r\n    $lastName: String\r\n    $file: Upload\r\n    $email: String\r\n    $password: String\r\n    $phone: String\r\n    $hourlyRate: Int\r\n    $description: String\r\n  ) {\r\n    updateUser(\r\n      id: $updateUserId\r\n      first_name: $firstName\r\n      last_name: $lastName\r\n      file: $file\r\n      email: $email\r\n      password: $password\r\n      phone: $phone\r\n      hourly_rate: $hourlyRate\r\n      description: $description\r\n    ) {\r\n      id\r\n      first_name\r\n      last_name\r\n      avatar\r\n      email\r\n      phone\r\n      password\r\n      hourly_rate\r\n      description\r\n    }\r\n  }\r\n`;\r\n//Job Mutations\r\nexport const CREATE_JOB = gql`\r\n  mutation AddJob(\r\n    $jobTitle: String!\r\n    $startDate: String!\r\n    $endDate: String!\r\n    $numOfPeopleNeeded: Int!\r\n    $jobDescription: String!\r\n    $createdBy: ID!\r\n  ) {\r\n    addJob(\r\n      job_Title: $jobTitle\r\n      start_Date: $startDate\r\n      end_Date: $endDate\r\n      num_of_people_needed: $numOfPeopleNeeded\r\n      job_description: $jobDescription\r\n      created_by: $createdBy\r\n    ) {\r\n      job_Title\r\n      start_Date\r\n      end_Date\r\n      num_of_people_needed\r\n      job_description\r\n      created_by {\r\n        company_Name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n//Delete User\r\nexport const DELETE_JOB = gql`\r\n  mutation DeleteJob($deleteJobId: ID) {\r\n    deleteJob(id: $deleteJobId) {\r\n      success\r\n    }\r\n  }\r\n`;\r\n\r\n//Delete User\r\nexport const UPDATE_JOB = gql`\r\n  mutation UpdateJob(\r\n    $updateJobId: ID!\r\n    $jobTitle: String\r\n    $startDate: String\r\n    $endDate: String\r\n    $numOfPeopleNeeded: Int\r\n    $jobDescription: String\r\n  ) {\r\n    updateJob(\r\n      id: $updateJobId\r\n      job_Title: $jobTitle\r\n      start_Date: $startDate\r\n      end_Date: $endDate\r\n      num_of_people_needed: $numOfPeopleNeeded\r\n      job_description: $jobDescription\r\n    ) {\r\n      id\r\n      job_Title\r\n      start_Date\r\n      end_Date\r\n      num_of_people_needed\r\n      job_description\r\n    }\r\n  }\r\n`;\r\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      baseOptions.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (baseOptions.onError || clientOptions.onError) {\n        baseOptions.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"names":["FreeLancerLogin","navigate","useNavigate","formRef","useRef","useContext","MyContext","setIsFreelancerLogin","setFreelancerLoginData","useMutation","USER_LOGIN","loginUser","error","loading","data","errorMessage1","message","split","splice","errorMessage2","Swal","position","icon","title","showConfirmButton","timer","customClass","className","onSubmit","e","preventDefault","variables","email","current","value","password","then","res","user","localStorage","setItem","token","swal","ref","name","type","placeholder","to","CREATE_COMPANY_MUTATION","gql","COMPANY_LOGIN","DELETE_COMPANY","UPDATE_COMPANY","COMPANY_FAVORITE","DELETE_COMPANY_FAVORITE","CREATE_USER_MUTATION","USER_FAVORITE","DELETE_USER","UPDATE_USER","CREATE_JOB","DELETE_JOB","UPDATE_JOB","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","useApolloClient","override","context","getApolloContext","client","__DEV__","invariant","mutation","options","verifyDocumentType","DocumentType","useState","called","result","setResult","mutationId","isMounted","assign","execute","useCallback","executeOptions","baseOptions","ignoreResults","clientOptions","mergeOptions","mutate","response","errors","length","ApolloError","graphQLErrors","result_1","equal","onCompleted","_a","_b","catch","result_2","onError","reset","useEffect","__assign","cache","Map","operationName","Query","Mutation","Subscription","document","operation","cached","get","concat","fragments","definitions","filter","x","kind","queries","mutations","subscriptions","definition","variableDefinitions","payload","requiredOperationName"],"sourceRoot":""}